// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  firstname          String
  lastname           String
  email              String               @unique
  password           String
  reset_token        String?              @unique
  phone_number       String?
  hire_date          DateTime
  center_id          String?
  center             Center?              @relation(fields: [center_id], references: [id])
  employeDepartments EmployeeDepartment[]
  created_at         DateTime             @default(now())
  updated_at         DateTime?
  roles              UserRole[]
  Department         Department?          @relation(fields: [departmentId], references: [id])
  departmentId       String?
  programs           Program[]
  
  userComments UserComment[]
}

model EmployeeDepartment {
  id            String     @id @default(uuid())
  title         String
  salaryRate    String
  hourlyRate    String
  department    Department @relation(fields: [department_id], references: [id])
  department_id String
  user          User       @relation(fields: [user_id], references: [id])
  user_id       String
  created_at    DateTime   @default(now())
}

model Department {
  id                 String               @id @default(uuid())
  name               String
  color              String?
  center_id          String
  center             Center               @relation(fields: [center_id], references: [id])
  created_at         DateTime             @default(now())
  updated_at         DateTime?
  User               User[]
  Program            Program[]
  EmployeeDepartment EmployeeDepartment[]
  status             DepartmentStatus     @default(DRAFTED)
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
}

enum CompensationType {
  HOURLY
  SALARY
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  created_at  DateTime         @default(now())
  updated_at  DateTime?
  users       UserRole[]
  permissions RolePermission[]
}

model EmployeeRole {
  id         String    @id @default(uuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime?
}

model UserRole {
  user_id    String
  user       User      @relation(fields: [user_id], references: [id])
  role_id    String
  role       Role      @relation(fields: [role_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime?

  @@id([user_id, role_id])
}

model Permission {
  id         String           @id @default(uuid())
  name       String           @unique
  created_at DateTime         @default(now())
  updated_at DateTime?
  roles      RolePermission[]
}

model RolePermission {
  role_id       String
  role          Role       @relation(fields: [role_id], references: [id])
  permission_id String
  permission    Permission @relation(fields: [permission_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime?

  @@id([role_id, permission_id])
}

model Center {
  id         String       @id @default(uuid())
  name       String
  created_at DateTime     @default(now())
  updated_at DateTime?
  color      String?
  User       User[]
  Department Department[]
}

model Benefit {
  id         String    @id @default(uuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime?
}

model Program {
  id             String        @id @default(uuid())
  name           String
  code           String
  department_id  String
  color          String?
  department     Department    @relation(fields: [department_id], references: [id])
  from_date      DateTime
  to_date        DateTime
  income         Json[]
  supply_expense Json[]
  salary_expense Json[]
  status         ProgramStatus @default(DRAFTED)
  created_at     DateTime      @default(now())
  updated_at     DateTime[]
  employee       Json[]
  user           User          @relation(fields: [user_id], references: [id]) // Add this line
  user_id        String
  Comment        Comment[]
  programBudget  Float         @default(0)
}

enum ProgramStatus {
  PENDING
  REJECTED
  APPROVED
  DRAFTED
  EXPIRED
}

enum DepartmentStatus {
  DRAFTED
  PENDING
  REJECTED
  APPROVED
}

model Comment {
  id         String   @id @default(uuid())
  program    Program  @relation(fields: [program_id], references: [id])
  program_id String
  field_id   String
  text       String
  created_at DateTime @default(now())
  isResolved Boolean  @default(false)
  userComments UserComment[]
}

model UserComment {
  id        String   @id @default(uuid())
  user_id   String
  comment_id String
  user      User     @relation(fields: [user_id], references: [id])
  comment   Comment  @relation(fields: [comment_id], references: [id])
}

model budget {
  id    Int    @id @default(autoincrement())
  total_value String
}
model budgetSuperAdmin {
  id    Int    @id @default(autoincrement())
  total_value String
}
